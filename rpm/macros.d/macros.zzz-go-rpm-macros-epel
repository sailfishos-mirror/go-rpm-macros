# Copyright © 2015-2019 Jan Chaloupka <jchaloup@redhat.com>,
#                       Nicolas Mailhot <nim@fedoraproject.org>
# Copyright © 2022      Maxwell G <gotmax@e.email>
#
# SPDX-License-Identifier: GPL-3.0-or-later

# Sets environment variables suitable for a Go source archive. Optional arguments:
# -z <number>         read the zth block of definitions, for example
#                     %{goipath<number>}, %{commit<number>}…
#                     derived from the import path value if not specified
# -i <go import path> use the specified import path value instead of the one
#                     found in %{goipath<number>}
# -v                  be verbose
# -V <version>        Should only be specified when creating subpackages with
#                     distinct versions
#                     default: %{version}.%{release}
# -T <tag>            default: %{tag<number>}
# -C <commit>         default: %{commit<number>}
# -B <branch>         default: %{branch<number>}
%goenv(z:i:vV:T:C:B:) %{lua:
local       go =  require "fedora.rpm.go_epel"
local   suffix =  rpm.expand("%{?-z*}")
local  goipath =  rpm.expand("%{?-i*}")
local  verbose = (rpm.expand("%{-v}") ~= "")
local    margs = { version = "V", tag = "T", commit = "C", branch = "B", }
local  mvalues = {}
for m,_ in pairs(margs) do
  local v =  rpm.expand("%{?-" ..  margs[m] .. "*}")
  if (v ~= "") then mvalues[m] = v end
end
go.env(suffix, goipath, verbose, mvalues)
}

# Perform usual Go source preparation steps. Optional arguments:
# -z <number>         read the zth block of definitions, for example
#                     %{goipath<number>}, %{commit<number>}…
#                     derived from the import path value if not specified
# -a                  process all sources in one go, instead of using separate
#                     -z calls
# -i <go import path> use the specified import path value instead of the one
#                     found in %{goipath<number>}
# -b <builddir>       use <builddir>  as build directory
#                     binaries will be produced in <builddir>/bin
#                     expanded Go sources will be symlinked in <builddir>/src
# -s <sourcedir>      symlink expanded Go sources from <sourcedir>
#                     default: %{_builddir}/%{?extractdir<number>}
# -k                  keep the vendor directory, do not delete it
# -e                  use extracted archives, do not perform %setup-like
#                     operations
# -A                  run %autosetup -N instead of %setup.
#                     run %autopatch -p1 separately to apply patches
# -S<scm>             pass an SCM name to %autosetup; implies -A
# -v                  be verbose
%goprep(z:ai:b:s:kervS:A) %{lua:
local        fedora =  require "fedora.common"
local       extract = (rpm.expand("%{-e}") == "")
-- Use autosetup if either -A or -S is passed
local     autosetup = (rpm.expand("%{-A}%{-S}") ~= "")
local   installdeps = (rpm.expand("%{-r}") == "")
local    processall = (rpm.expand("%{-a}") ~= "") and (rpm.expand("%{-z}") == "")
local    setupflags =  rpm.expand("%{!-v:-q}")
local autosetupflags = rpm.expand("%{-v} %{-S}")
local  gomkdirflags =  rpm.expand("%{?-i} %{?-b} %{?-s} %{-k} %{-v}")
local buildrequires = {}
local function process(suffix)
  local zsuffix = ""
  if (suffix ~= "") and (suffix ~= nil) then
        zsuffix = "-z " .. suffix .. " "
  end
  if extract then
    setup = autosetup and ("%autosetup -N " .. autosetupflags) or ("%setup  " .. setupflags)
    print(rpm.expand(setup .." %{?forgesetupargs" .. suffix .. "}\\n"))
  end
  print(  rpm.expand("%gomkdir " .. zsuffix .. gomkdirflags .. "\\n"))
end
-- Main loop
if processall then
  for _,s in pairs(fedora.getsuffixes("goipath")) do
    process(s)
  end
else
   process(rpm.expand("%{?-z*}"))
end
}


# Perform the %install tasks of a golang-*-devel subpackage. Arguments:
# -z <number>         read the zth block of definitions, for example
#                     %{goipaths<number>}
# -a                  process all blocks in one go, instead of using separate
#                     -z calls
# -v                  be verbose
%godevelinstall(z:av) %{lua:
local         go =  require "fedora.rpm.go_epel"
local     suffix =  rpm.expand("%{-z*}")
local processall = (rpm.expand("%{-a}") ~= "") and (rpm.expand("%{-z}") == "")
local    verbose = (rpm.expand("%{-v}") ~= "")
go.install("devel", suffix, processall, verbose)
}

# Perform the %install tasks of a compat-golang-*-devel subpackage. Arguments:
# -z <number>         read the zth block of definitions, for example
#                     %{goaltipaths<number>}
# -a                  process all blocks in one go, instead of using separate
#                     -z calls
# -v                  be verbose
%goaltinstall(z:av) %{lua:
local         go =  require "fedora.rpm.go_epel"
local     suffix =  rpm.expand("%{-z*}")
local processall = (rpm.expand("%{-a}") ~= "") and (rpm.expand("%{-z}") == "")
local    verbose = (rpm.expand("%{-v}") ~= "")
go.install("alt", suffix, processall, verbose)
}


# EPEL 9-only macros

# This is the directory where RHEL 9 bundles golist.
%_golist_dir      %{_libexecdir}/go-rpm-macros

# Workaround for https://bugzilla.redhat.com/show_bug.cgi?id=2098400
# The modified golist in RHEL has a different CLI interface, so we only add
# the extra arguments when that is used.
%goinstallflags %{godefaultflags} -e .proto -e .s -e .md

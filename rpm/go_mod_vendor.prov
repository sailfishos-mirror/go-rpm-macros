#!/usr/bin/python3 -s

# Parse modules.txt files into rpm .spec file Provides for bundled dependencies.
# Written by Fabio "decathorpe" Valentini <decathorpe@fedoraproject.org> for
# the fedora syncthing package: https://src.fedoraproject.org/rpms/syncthing
# SPDX-License-Identifier: CC0-1.0 OR Unlicense

# Modified by @gotmax23 to be used as a dependency generator
# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-FileCopyrightText: 2022 Maxwell G <gotmax@e.email>

import re
import sys

# TODO(anyone): Rewrite this whole thing using regex instead of manual line parsing

# Handle => style replace directives
REPLACE_REGEX = re.compile(r"^.+( v[0-9-\.]+)? => (?!\./)")
# Handle local replace directives
LOCAL_REPLACE_REGEX = re.compile(r"=> \./.*")


def process(path: str):
    """
    Process lines in a modules.txt file

    Example lines:

    ```
    # bitbucket.org/bertimus9/systemstat v0.5.0
    # github.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1
    # k8s.io/api v0.0.0 => ./staging/src/k8s.io/api
    # golang.org/x/crypto v0.8.0 => github.com/ProtonMail/crypto v0.0.0-20200420072808-71bec3603bf3
    ```
    """
    with open(path, encoding="utf-8") as file:
        contents = file.read()

    lines = contents.split("\n")

    # dependencies = filter lines for "# package version"
    dependencies = list(filter(lambda line: line.startswith("# "), lines))

    # parse vendored dependencies into (import path, version) pairs
    vendored = list()
    for dep in dependencies:
        # Strip leading character
        dep = dep[2:]
        # Apply replacements
        for reg in (REPLACE_REGEX, LOCAL_REPLACE_REGEX):
            dep = reg.sub("", dep)
        ipath, version = dep.split(" ")[:2]

        # check for git snapshots
        if len(version) > 27:
            # return only 7 digits of git commit hash
            version = version[-12:-1][0:7]
        else:
            # strip off leading "v"
            version = version.lstrip("v")

        vendored.append((ipath, version))

    for ipath, version in vendored:
        print(f"bundled(golang({ipath})) = {version}")


def main() -> None:
    files = sys.stdin.read().splitlines()
    for file in files:
        process(file)


if __name__ == "__main__":
    main()
